/**
 * public types
 * these types are exported by the module
 */
export declare type VectorXYZ = [number, number, number];
export declare type BooleanXYZ = [boolean, boolean, boolean];
export declare type PreventWheelActionType = boolean | 'x' | 'y' | 'z';
export declare type ReverseSign = boolean | BooleanXYZ;
export interface WheelGesturesConfig {
    preventWheelAction: PreventWheelActionType;
    reverseSign: ReverseSign;
}
export declare type WheelGesturesOptions = Partial<WheelGesturesConfig>;
export declare type WheelEventDataRequiredFields = 'deltaMode' | 'deltaX' | 'deltaY' | 'timeStamp';
export interface WheelEventData extends Pick<WheelEvent, WheelEventDataRequiredFields>, Partial<Omit<WheelEvent, WheelEventDataRequiredFields>> {
}
export interface WheelEventState {
    isStart: boolean;
    isMomentum: boolean;
    isEnding: boolean;
    isMomentumCancel: boolean;
    axisDelta: VectorXYZ;
    axisVelocity: VectorXYZ;
    axisMovement: VectorXYZ;
    axisMovementProjection: VectorXYZ;
    event: WheelEvent | WheelEventData;
    previous?: WheelEventState;
}
export declare type WheelGesturesEventMap = {
    wheel: WheelEventState;
};
