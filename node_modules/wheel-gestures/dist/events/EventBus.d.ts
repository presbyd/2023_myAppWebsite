export declare type EventMapEmpty = Record<string, unknown>;
export declare type EventListener<D = unknown> = (data: D) => void;
export declare type Off = () => void;
export default function EventBus<EventMap = EventMapEmpty>(): Readonly<{
    on: <EK extends keyof EventMap>(type: EK, listener: EventListener<EventMap[EK]>) => Off;
    off: <EK_1 extends keyof EventMap>(type: EK_1, listener: EventListener<EventMap[EK_1]>) => void;
    dispatch: <EK_2 extends keyof EventMap>(type: EK_2, data: EventMap[EK_2]) => void;
}>;
